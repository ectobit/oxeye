name: build

on:
  push:
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Set up go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18.0-beta2
          stable: false
      - name: Set up cache
        uses: actions/cache@v2.1.7
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Set up linters
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.44.0
          curl -sSL -o /usr/local/bin/nancy https://github.com/sonatype-nexus-community/nancy/releases/download/v1.0.29/nancy-v1.0.29-linux-amd64 && chmod 755 /usr/local/bin/nancy
      - name: Check out
        uses: actions/checkout@v2.4.0
      - name: Lint
        run: |
          # TODO: Enable linter once it works correctly with generics
          make lint || true
          go list -json -m all | nancy sleuth
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: Dockerfile
          ignore: DL3018
  # test:
  #   runs-on: ubuntu-latest
  #   needs: lint
  #   container: golang:1.17.5
  #   services:
  #     postgres:
  #       image: postgres:14-alpine
  #       env:
  #         POSTGRES_PASSWORD: arc
  #         POSTGRES_DB: test
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   steps:
  #     - name: Check out
  #       uses: actions/checkout@v2.4.0
  #     - name: Set up dependencies
  #       run: |
  #         apt-get update && apt-get install -y postgresql-client-13
  #         curl -L https://github.com/golang-migrate/migrate/releases/download/v4.15.1/migrate.linux-amd64.tar.gz | tar zx -C /usr/local/bin
  #     - name: Set up cache
  #       uses: actions/cache@v2.1.7
  #       with:
  #         path: ~/go/pkg/mod
  #         key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #         restore-keys: |
  #           ${{ runner.os }}-go-
  #     - name: Run migrations
  #       env:
  #         PGPASSWORD: arc
  #       run: |
  #         psql -U postgres -h postgres -d test -c 'CREATE EXTENSION IF NOT EXISTS "uuid-ossp"'
  #         migrate -path=migrations -database='postgres://postgres:arc@postgres/test?sslmode=disable&query' up
  #     - name: Test
  #       env:
  #         ARC_DB_HOST: postgres
  #       run: go test -race ./...
  # build:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #     - name: Check out
  #       uses: actions/checkout@v2.3.5
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1.6.0
  #     - name: Cache Docker layers
  #       uses: actions/cache@v2.1.7
  #       with:
  #         path: /tmp/.buildx-cache
  #         key: ${{ runner.os }}-buildx-${{ github.sha }}
  #         restore-keys: |
  #           ${{ runner.os }}-buildx-
  #     - name: Set up tags
  #       id: meta
  #       uses: docker/metadata-action@v3
  #       with:
  #         images: ectobit/oxeye
  #         labels: |
  #           org.opencontainers.image.licenses=BSD-2-Clause-Patent
  #           org.opencontainers.image.vendor=ectobit.com
  #         tags: |
  #           type=schedule
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}
  #           type=semver,pattern={{major}}
  #           type=edge
  #           type=sha
  #     - name: Login to container registry
  #       uses: docker/login-action@v1.10.0
  #       with:
  #         username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
  #         password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
  #     - name: Build and push image to container registry
  #       uses: docker/build-push-action@v2.7.0
  #       with:
  #         platforms: linux/amd64,linux/arm64
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=local,src=/tmp/.buildx-cache
  #         cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
  #     - name: Move cache
  #       run: |
  #         rm -rf /tmp/.buildx-cache
  #         mv /tmp/.buildx-cache-new /tmp/.buildx-cache
